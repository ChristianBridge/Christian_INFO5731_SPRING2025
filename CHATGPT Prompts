Assignment 1

Each of the (a.) was a screenshot of the output from GhatGPT following each prompt.

Question 6:
1.	Using python create a database management system for adding, deleting, and changing products. Input files will be file type "CSV". Each item will have the following: ID number, quantity, item value, category, item name.
a.	 
2.	create a CSV file of random food items, each item needs a unique ID, quantity, value, category, and name.
a.	 
3.	I received the following error: IntegrityError Traceback (most recent call last) <ipython-input-70-c36a9783de3f> in <cell line: 0>() ----> 1 import_from_csv('food_items.csv') <ipython-input-69-03e6b242c9a3> in import_from_csv(filename) 69 next(reader) # Skip header 70 for row in reader: ---> 71 cursor.execute("INSERT INTO products VALUES (?, ?, ?, ?, ?)", (int(row[0]), int(row[1]), float(row[2]), row[3], row[4])) 72 conn.commit() 73 conn.close() IntegrityError: UNIQUE constraint failed: products.id
a.	 
4.	add column names to view_products: unique ID, quantity, value, category, and name.
a.	 
5.	write a python code that ensure food items in the list names, are correctly categorized into the following categories: ["Fruits", "Vegetables", "Dairy", "Meat", "Grains", "Beverages", "Snacks"]
a.	 
6.	encorporate that logic with the following: def generate_food_csv(filename, num_items=50): with open(filename, "w", newline="") as file: writer = csv.writer(file) writer.writerow(["ID", "Quantity", "Value", "Category", "Name"]) for i in range(1, num_items + 1): item_id = i quantity = random.randint(1, 100) value = round(random.uniform(1, 50), 2) category = random.choice(categories) name = random.choice(names) writer.writerow([item_id, quantity, value, category, name])
a.	 
7.	add functionality to the code to handle errors from the CSV file import
a.	 
Question 7:
1.	Create a database in python for a flight booking system. Each flight should have: departure location, arrival location, time flight leaves, distance traveled between departure and arrival location, time to arrival, capacity of flight.
a.	 
2.	create functions to add a new flight, find a flight given departure location and arrival location, and a booking functionality.
a.	 
3.	create a function to cancel bookings
a.	 
4.	create a function to query all information in database
a.	 
5.	generate 50 random flights using real world flight patterns
a.	 
6.	ensure the function uses the add_flight function
a.	 

